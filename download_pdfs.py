# This code is generated by Doubao AI
import re
import requests
from tqdm import tqdm
import os

def extract_pdf_info(text):
    """
    Extract the paper title and the corresponding PDF link from the text.
    :param text: The input text content.
    :return: A list of tuples containing the paper title and the link.
    """
    pattern = r'\|.*?\|\s*ðŸ”¥*\[([^\]]+)\].*?\[\[(.*?pdf.*?)\]\]\((https://[^\)]+)\)'
    matches = re.findall(pattern, text)
    info_list = []
    for title, _, link in matches:
        # Remove special characters from the paper title to avoid illegal file names.
        valid_title = re.sub(r'[\\/*?:"<>|]', '', title)
        info_list.append((valid_title, link))
    return info_list

def download_file(title, url):
    """
    Download the PDF file from the specified link and use the paper title as the file name.
    :param title: The paper title.
    :param url: The link to the PDF file.
    :return: A boolean indicating whether the download was successful.
    """
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()

        # Create the download directory.
        download_dir = 'downloaded_pdfs'
        if not os.path.exists(download_dir):
            os.makedirs(download_dir)

        file_name = os.path.join(download_dir, f"{title}.pdf")
        total_size = int(response.headers.get('content-length', 0))

        print(f"Downloading paper {title}, file name is {file_name}...")
        with open(file_name, 'wb') as file, tqdm(
            desc=file_name,
            total=total_size,
            unit='B',
            unit_scale=True,
            unit_divisor=1024,
        ) as bar:
            for data in response.iter_content(chunk_size=1024):
                size = file.write(data)
                bar.update(size)

        print(f"Paper {title} (file name {file_name}) downloaded successfully!")
        return True
    except requests.RequestException as e:
        print(f"Error downloading paper {title} (link {url}): {e}")
        return False

def main():
    try:
        with open('README.md', 'r', encoding='utf-8') as file:
            text = file.read()

        pdf_info = extract_pdf_info(text)
        print(f"A total of {len(pdf_info)} PDF links were matched.")

        for title, link in pdf_info:
            download_file(title, link)
    except FileNotFoundError:
        print("README.md file not found. Please ensure the file exists in the current working directory.")

if __name__ == "__main__":
    main()
    
